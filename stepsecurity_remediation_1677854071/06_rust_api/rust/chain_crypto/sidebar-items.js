window.SIDEBAR_ITEMS = {"enum":[["EvolvingStatus","Evolving status"],["PublicKeyError",""],["PublicKeyFromStrError",""],["SecretKeyError",""],["SignatureError",""],["SignatureFromStrError",""],["Verification",""],["VrfVerification",""]],"fn":[["vrf_evaluate_and_prove","Evaluate the VRF for a specific input and return a verified output"],["vrf_verified_get_output",""],["vrf_verify","Verify the VRF output for a specific input is correct"]],"mod":[["algorithms",""],["asymlock","Simple Assymmetric locking mechanism using:"],["bech32",""],["digest","module to provide some handy interfaces atop the hashes so we have the common interfaces for the project to work with."],["ec","Module defining the Group Elements and Scalar structures in one primer order group (over sec2 curves), or the other (ristretto255)."],["hash","module to provide some handy interfaces atop the hashes so we have the common interfaces for the project to work with."],["multilock","Similar to asymlock but takes a set of recipients instead of a unique receiver"],["role",""],["testing",""]],"struct":[["KeyPair",""],["PublicKey",""],["SecretKey",""],["Signature",""]],"trait":[["AsymmetricKey",""],["AsymmetricPublicKey",""],["KeyEvolvingAlgorithm",""],["KeyEvolvingSignatureAlgorithm",""],["SecretKeySizeStatic",""],["SigningAlgorithm",""],["VerifiableRandomFunction",""],["VerificationAlgorithm",""]]};