window.SIDEBAR_ITEMS = {"constant":[["CARDANO_MAINNET_SLOTS_PER_EPOCH","Const defining caradno mainnet slot per epoch setting"]],"enum":[["CatalystBlockFrostApiError","Blockfrost api related Error"],["DbSyncError","Db sync error"],["JsonConversionError","Metadata conversion error"]],"mod":[["wallet_state","wallet state utils"]],"struct":[["Block0","Block0 representation"],["BlockBuilder","Block builder responsible for building blocks"],["CardanoWallet","Represents Cardano mainnet wallet which is able to generate registration transaction metadata"],["CatalystBlockFrostApi","Wrapper on Blockfrost api tailored for catalyst needs"],["InMemoryDbSync","Mock of real cardano db sync. At this moment we only stores transactions metadata as the only purpose of existance for this struct is to provide catalyst voting registrations Struct can be persisted and restored from json file using `serde_json`."],["InMemoryNode","In memory cardano node implementation. Basic design contains read write lock over ledger struct as well as background task for updating ledger"],["Initials","Root struct for defining snapshot template"],["Ledger","Simulates cardano node behavior. Contains mempool of transactions as well as blockchain. Meant to be used as library in current thread."],["METADATUM_1","metadatum label 1 constant"],["METADATUM_2","metadatum label 2 constant"],["METADATUM_3","metadatum label 3 constant"],["METADATUM_4","metadatum label 4 constant"],["MainnetNetworkBuilder","Cardano Network state builder, responsible to create a given state of cardano network which will be an input for snapshot"],["REGISTRATION_METADATA_IDX","registration metadata index constant"],["REGISTRATION_METADATA_LABEL","registration metadata constant"],["REGISTRATION_METADATA_SIGNATURE_LABEL","registration signature metadata constant"],["REGISTRATION_SIGNATURE_METADATA_IDX","registration signature metadata index constant"],["RegistrationTransactionBuilder","Responsible for building registration transaction metadata"],["Settings","Cardano node mock settings"],["SharedInMemoryDbSync","thread safe `InMemoryDbSync`. It has inner struct `db_sync` with rw lock guard and handle to update thread which listen to `InMemoryNode` mock block updates"],["SnapshotParameters","Snapshot"],["TransactionBuilder","Transaction builder for cardano mainnet"]],"trait":[["BlockDateFromCardanoAbsoluteSlotNo","Basic converter from absolute slot number and {epoch,slot} pair"],["GeneralTransactionMetadataInfo","Extension for `GeneralTransactionMetadata` tailored for Catalyst purposes"]]};